{"version":3,"sources":["nouislider.js"],"names":[],"mappingsfile":"extra.js","sourcesContent":["/*!\n * Materialize v0.97.6 (http://materializecss.com)\n * Copyright 2014-2015 Materialize\n * MIT License (https://raw.githubusercontent.com/Dogfalo/materialize/master/LICENSE)\n */\n// wNumb\n(function() {\n\tfunction r(b) {\n\t\treturn b.split(\"\").reverse().join(\"\")\n\t}\n\n\tfunction s(b, f, c) {\n\t\tif ((b[f] || b[c]) && b[f] === b[c]) throw Error(f);\n\t}\n\n\tfunction v(b, f, c, d, e, p, q, k, l, h, n, a) {\n\t\tq = a;\n\t\tvar m, g = n = \"\";\n\t\tp && (a = p(a));\n\t\tif (\"number\" !== typeof a || !isFinite(a)) return !1;\n\t\tb && 0 === parseFloat(a.toFixed(b)) && (a = 0);\n\t\t0 > a && (m = !0, a = Math.abs(a));\n\t\tb && (p = Math.pow(10, b), a = (Math.round(a * p) / p).toFixed(b));\n\t\ta = a.toString(); - 1 !== a.indexOf(\".\") && (b = a.split(\".\"), a = b[0], c && (n = c + b[1]));\n\t\tf && (a = r(a).match(/.{1,3}/g), a = r(a.join(r(f))));\n\t\tm && k && (g += k);\n\t\td && (g += d);\n\t\tm && l && (g += l);\n\t\tg = g + a + n;\n\t\te && (g += e);\n\t\th && (g = h(g, q));\n\t\treturn g\n\t}\n\n\tfunction w(b, f, c, d, e, h, q, k, l, r, n, a) {\n\t\tvar m;\n\t\tb = \"\";\n\t\tn && (a = n(a));\n\t\tif (!a || \"string\" !== typeof a) return !1;\n\t\tk && a.substring(0, k.length) === k && (a = a.replace(k, \"\"), m = !0);\n\t\td && a.substring(0, d.length) === d && (a = a.replace(d, \"\"));\n\t\tl && a.substring(0, l.length) === l && (a = a.replace(l, \"\"), m = !0);\n\t\te && a.slice(-1 * e.length) === e && (a = a.slice(0, -1 * e.length));\n\t\tf && (a = a.split(f).join(\"\"));\n\t\tc && (a = a.replace(c, \".\"));\n\t\tm && (b += \"-\");\n\t\tb = Number((b + a).replace(/[^0-9\\.\\-.]/g, \"\"));\n\t\tq && (b = q(b));\n\t\treturn \"number\" ===\n\t\t\ttypeof b && isFinite(b) ? b : !1\n\t}\n\n\tfunction x(b) {\n\t\tvar f, c, d, e = {};\n\t\tfor (f = 0; f < h.length; f += 1) c = h[f], d = b[c], void 0 === d ? e[c] = \"negative\" !== c || e.negativeBefore ? \"mark\" === c && \".\" !== e.thousand ? \".\" : !1 : \"-\" : \"decimals\" === c ? 0 < d && 8 > d && (e[c] = d) : \"encoder\" === c || \"decoder\" === c || \"edit\" === c || \"undo\" === c ? \"function\" === typeof d && (e[c] = d) : \"string\" === typeof d && (e[c] = d);\n\t\ts(e, \"mark\", \"thousand\");\n\t\ts(e, \"prefix\", \"negative\");\n\t\ts(e, \"prefix\", \"negativeBefore\");\n\t\treturn e\n\t}\n\n\tfunction u(b, f, c) {\n\t\tvar d, e = [];\n\t\tfor (d = 0; d < h.length; d += 1) e.push(b[h[d]]);\n\t\te.push(c);\n\t\treturn f.apply(\"\",\n\t\t\te)\n\t}\n\n\tfunction t(b) {\n\t\tif (!(this instanceof t)) return new t(b);\n\t\t\"object\" === typeof b && (b = x(b), this.to = function(f) {\n\t\t\treturn u(b, v, f)\n\t\t}, this.from = function(f) {\n\t\t\treturn u(b, w, f)\n\t\t})\n\t}\n\tvar h = \"decimals thousand mark prefix postfix encoder decoder negativeBefore negative edit undo\".split(\" \");\n\twindow.wNumb = t\n})();\n\n\n/*! nouislider - 8.0.2 - 2015-07-06 13:22:09 */\n\n/*jslint browser: true */\n/*jslint white: true */\n\n(function(factory) {\n\n\tif (typeof define === 'function' && define.amd) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\n\t} else if (typeof exports === 'object') {\n\n\t\tvar fs = require('fs');\n\n\t\t// Node/CommonJS\n\t\tmodule.exports = factory();\n\t\tmodule.exports.css = function() {\n\t\t\treturn fs.readFileSync(__dirname + '/nouislider.min.css', 'utf8');\n\t\t};\n\n\t} else {\n\n\t\t// Browser globals\n\t\twindow.noUiSlider = factory();\n\t}\n\n}(function() {\n\n\t'use strict';\n\n\n\t// Removes duplicates from an array.\n\tfunction unique(array) {\n\t\treturn array.filter(function(a) {\n\t\t\treturn !this[a] ? this[a] = true : false;\n\t\t}, {});\n\t}\n\n\t// Round a value to the closest 'to'.\n\tfunction closest(value, to) {\n\t\treturn Math.round(value / to) * to;\n\t}\n\n\t// Current position of an element relative to the document.\n\tfunction offset(elem) {\n\n\t\tvar rect = elem.getBoundingClientRect(),\n\t\t\tdoc = elem.ownerDocument,\n\t\t\twin = doc.defaultView || doc.parentWindow,\n\t\t\tdocElem = doc.documentElement,\n\t\t\txOff = win.pageXOffset;\n\n\t\t// getBoundingClientRect contains left scroll in Chrome on Android.\n\t\t// I haven't found a feature detection that proves this. Worst case\n\t\t// scenario on mis-match: the 'tap' feature on horizontal sliders breaks.\n\t\tif (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {\n\t\t\txOff = 0;\n\t\t}\n\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\n\t\t\tleft: rect.left + xOff - docElem.clientLeft\n\t\t};\n\t}\n\n\t// Checks whether a value is numerical.\n\tfunction isNumeric(a) {\n\t\treturn typeof a === 'number' && !isNaN(a) && isFinite(a);\n\t}\n\n\t// Rounds a number to 7 supported decimals.\n\tfunction accurateNumber(number) {\n\t\tvar p = Math.pow(10, 7);\n\t\treturn Number((Math.round(number * p) / p).toFixed(7));\n\t}\n\n\t// Sets a class and removes it after [duration] ms.\n\tfunction addClassFor(element, className, duration) {\n\t\taddClass(element, className);\n\t\tsetTimeout(function() {\n\t\t\tremoveClass(element, className);\n\t\t}, duration);\n\t}\n\n\t// Limits a value to 0 - 100\n\tfunction limit(a) {\n\t\treturn Math.max(Math.min(a, 100), 0);\n\t}\n\n\t// Wraps a variable as an array, if it isn't one yet.\n\tfunction asArray(a) {\n\t\treturn Array.isArray(a) ? a : [a];\n\t}\n\n\t// Counts decimals\n\tfunction countDecimals(numStr) {\n\t\tvar pieces = numStr.split(\".\");\n\t\treturn pieces.length > 1 ? pieces[1].length : 0;\n\t}\n\n\t// http://youmightnotneedjquery.com/#add_class\n\tfunction addClass(el, className) {\n\t\tif (el.classList) {\n\t\t\tel.classList.add(className);\n\t\t} else {\n\t\t\tel.className += ' ' + className;\n\t\t}\n\t}\n\n\t// http://youmightnotneedjquery.com/#remove_class\n\tfunction removeClass(el, className) {\n\t\tif (el.classList) {\n\t\t\tel.classList.remove(className);\n\t\t} else {\n\t\t\tel.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n\t\t}\n\t}\n\n\t// http://youmightnotneedjquery.com/#has_class\n\tfunction hasClass(el, className) {\n\t\tif (el.classList) {\n\t\t\tel.classList.contains(className);\n\t\t} else {\n\t\t\tnew RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);\n\t\t}\n\t}\n\n\n\tvar\n\t// Determine the events to bind. IE11 implements pointerEvents without\n\t// a prefix, which breaks compatibility with the IE10 implementation.\n\t/** @const */\n\t\tactions = window.navigator.pointerEnabled ? {\n\t\t\tstart: 'pointerdown',\n\t\t\tmove: 'pointermove',\n\t\t\tend: 'pointerup'\n\t\t} : window.navigator.msPointerEnabled ? {\n\t\t\tstart: 'MSPointerDown',\n\t\t\tmove: 'MSPointerMove',\n\t\t\tend: 'MSPointerUp'\n\t\t} : {\n\t\t\tstart: 'mousedown touchstart',\n\t\t\tmove: 'mousemove touchmove',\n\t\t\tend: 'mouseup touchend'\n\t\t},\n\t\t// Re-usable list of classes;\n\t\t/** @const */\n\t\tClasses = [\n\t\t\t/*  0 */\n\t\t\t'noUi-target'\n\t\t\t/*  1 */\n\t\t\t, 'noUi-base'\n\t\t\t/*  2 */\n\t\t\t, 'noUi-origin'\n\t\t\t/*  3 */\n\t\t\t, 'noUi-handle'\n\t\t\t/*  4 */\n\t\t\t, 'noUi-horizontal'\n\t\t\t/*  5 */\n\t\t\t, 'noUi-vertical'\n\t\t\t/*  6 */\n\t\t\t, 'noUi-background'\n\t\t\t/*  7 */\n\t\t\t, 'noUi-connect'\n\t\t\t/*  8 */\n\t\t\t, 'noUi-ltr'\n\t\t\t/*  9 */\n\t\t\t, 'noUi-rtl'\n\t\t\t/* 10 */\n\t\t\t, 'noUi-dragable'\n\t\t\t/* 11 */\n\t\t\t, ''\n\t\t\t/* 12 */\n\t\t\t, 'noUi-state-drag'\n\t\t\t/* 13 */\n\t\t\t, ''\n\t\t\t/* 14 */\n\t\t\t, 'noUi-state-tap'\n\t\t\t/* 15 */\n\t\t\t, 'noUi-active'\n\t\t\t/* 16 */\n\t\t\t, ''\n\t\t\t/* 17 */\n\t\t\t, 'noUi-stacking'\n\t\t];\n\n\n\t// Value calculation\n\n\t// Determine the size of a sub-range in relation to a full range.\n\tfunction subRangeRatio(pa, pb) {\n\t\treturn (100 / (pb - pa));\n\t}\n\n\t// (percentage) How many percent is this value of this range?\n\tfunction fromPercentage(range, value) {\n\t\treturn (value * 100) / (range[1] - range[0]);\n\t}\n\n\t// (percentage) Where is this value on this range?\n\tfunction toPercentage(range, value) {\n\t\treturn fromPercentage(range, range[0] < 0 ?\n\t\t\tvalue + Math.abs(range[0]) :\n\t\t\tvalue - range[0]);\n\t}\n\n\t// (value) How much is this percentage on this range?\n\tfunction isPercentage(range, value) {\n\t\treturn ((value * (range[1] - range[0])) / 100) + range[0];\n\t}\n\n\n\t// Range conversion\n\n\tfunction getJ(value, arr) {\n\n\t\tvar j = 1;\n\n\t\twhile (value >= arr[j]) {\n\t\t\tj += 1;\n\t\t}\n\n\t\treturn j;\n\t}\n\n\t// (percentage) Input a value, find where, on a scale of 0-100, it applies.\n\tfunction toStepping(xVal, xPct, value) {\n\n\t\tif (value >= xVal.slice(-1)[0]) {\n\t\t\treturn 100;\n\t\t}\n\n\t\tvar j = getJ(value, xVal),\n\t\t\tva, vb, pa, pb;\n\n\t\tva = xVal[j - 1];\n\t\tvb = xVal[j];\n\t\tpa = xPct[j - 1];\n\t\tpb = xPct[j];\n\n\t\treturn pa + (toPercentage([va, vb], value) / subRangeRatio(pa, pb));\n\t}\n\n\t// (value) Input a percentage, find where it is on the specified range.\n\tfunction fromStepping(xVal, xPct, value) {\n\n\t\t// There is no range group that fits 100\n\t\tif (value >= 100) {\n\t\t\treturn xVal.slice(-1)[0];\n\t\t}\n\n\t\tvar j = getJ(value, xPct),\n\t\t\tva, vb, pa, pb;\n\n\t\tva = xVal[j - 1];\n\t\tvb = xVal[j];\n\t\tpa = xPct[j - 1];\n\t\tpb = xPct[j];\n\n\t\treturn isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));\n\t}\n\n\t// (percentage) Get the step that applies at a certain value.\n\tfunction getStep(xPct, xSteps, snap, value) {\n\n\t\tif (value === 100) {\n\t\t\treturn value;\n\t\t}\n\n\t\tvar j = getJ(value, xPct),\n\t\t\ta, b;\n\n\t\t// If 'snap' is set, steps are used as fixed points on the slider.\n\t\tif (snap) {\n\n\t\t\ta = xPct[j - 1];\n\t\t\tb = xPct[j];\n\n\t\t\t// Find the closest position, a or b.\n\t\t\tif ((value - a) > ((b - a) / 2)) {\n\t\t\t\treturn b;\n\t\t\t}\n\n\t\t\treturn a;\n\t\t}\n\n\t\tif (!xSteps[j - 1]) {\n\t\t\treturn value;\n\t\t}\n\n\t\treturn xPct[j - 1] + closest(\n\t\t\tvalue - xPct[j - 1],\n\t\t\txSteps[j - 1]\n\t\t);\n\t}\n\n\n\t// Entry parsing\n\n\tfunction handleEntryPoint(index, value, that) {\n\n\t\tvar percentage;\n\n\t\t// Wrap numerical input in an array.\n\t\tif (typeof value === \"number\") {\n\t\t\tvalue = [value];\n\t\t}\n\n\t\t// Reject any invalid input, by testing whether value is an array.\n\t\tif (Object.prototype.toString.call(value) !== '[object Array]') {\n\t\t\tthrow new Error(\"noUiSlider: 'range' contains invalid value.\");\n\t\t}\n\n\t\t// Covert min/max syntax to 0 and 100.\n\t\tif (index === 'min') {\n\t\t\tpercentage = 0;\n\t\t} else if (index === 'max') {\n\t\t\tpercentage = 100;\n\t\t} else {\n\t\t\tpercentage = parseFloat(index);\n\t\t}\n\n\t\t// Check for correct input.\n\t\tif (!isNumeric(percentage) || !isNumeric(value[0])) {\n\t\t\tthrow new Error(\"noUiSlider: 'range' value isn't numeric.\");\n\t\t}\n\n\t\t// Store values.\n\t\tthat.xPct.push(percentage);\n\t\tthat.xVal.push(value[0]);\n\n\t\t// NaN will evaluate to false too, but to keep\n\t\t// logging clear, set step explicitly. Make sure\n\t\t// not to override the 'step' setting with false.\n\t\tif (!percentage) {\n\t\t\tif (!isNaN(value[1])) {\n\t\t\t\tthat.xSteps[0] = value[1];\n\t\t\t}\n\t\t} else {\n\t\t\tthat.xSteps.push(isNaN(value[1]) ? false : value[1]);\n\t\t}\n\t}\n\n\tfunction handleStepPoint(i, n, that) {\n\n\t\t// Ignore 'false' stepping.\n\t\tif (!n) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Factor to range ratio\n\t\tthat.xSteps[i] = fromPercentage([\n\t\t\tthat.xVal[i], that.xVal[i + 1]\n\t\t], n) / subRangeRatio(\n\t\t\tthat.xPct[i],\n\t\t\tthat.xPct[i + 1]);\n\t}\n\n\n\t// Interface\n\n\t// The interface to Spectrum handles all direction-based\n\t// conversions, so the above values are unaware.\n\n\tfunction Spectrum(entry, snap, direction, singleStep) {\n\n\t\tthis.xPct = [];\n\t\tthis.xVal = [];\n\t\tthis.xSteps = [singleStep || false];\n\t\tthis.xNumSteps = [false];\n\n\t\tthis.snap = snap;\n\t\tthis.direction = direction;\n\n\t\tvar index, ordered = [ /* [0, 'min'], [1, '50%'], [2, 'max'] */ ];\n\n\t\t// Map the object keys to an array.\n\t\tfor (index in entry) {\n\t\t\tif (entry.hasOwnProperty(index)) {\n\t\t\t\tordered.push([entry[index], index]);\n\t\t\t}\n\t\t}\n\n\t\t// Sort all entries by value (numeric sort).\n\t\tordered.sort(function(a, b) {\n\t\t\treturn a[0] - b[0];\n\t\t});\n\n\t\t// Convert all entries to subranges.\n\t\tfor (index = 0; index < ordered.length; index++) {\n\t\t\thandleEntryPoint(ordered[index][1], ordered[index][0], this);\n\t\t}\n\n\t\t// Store the actual step values.\n\t\t// xSteps is sorted in the same order as xPct and xVal.\n\t\tthis.xNumSteps = this.xSteps.slice(0);\n\n\t\t// Convert all numeric steps to the percentage of the subrange they represent.\n\t\tfor (index = 0; index < this.xNumSteps.length; index++) {\n\t\t\thandleStepPoint(index, this.xNumSteps[index], this);\n\t\t}\n\t}\n\n\tSpectrum.prototype.getMargin = function(value) {\n\t\treturn this.xPct.length === 2 ? fromPercentage(this.xVal, value) : false;\n\t};\n\n\tSpectrum.prototype.toStepping = function(value) {\n\n\t\tvalue = toStepping(this.xVal, this.xPct, value);\n\n\t\t// Invert the value if this is a right-to-left slider.\n\t\tif (this.direction) {\n\t\t\tvalue = 100 - value;\n\t\t}\n\n\t\treturn value;\n\t};\n\n\tSpectrum.prototype.fromStepping = function(value) {\n\n\t\t// Invert the value if this is a right-to-left slider.\n\t\tif (this.direction) {\n\t\t\tvalue = 100 - value;\n\t\t}\n\n\t\treturn accurateNumber(fromStepping(this.xVal, this.xPct, value));\n\t};\n\n\tSpectrum.prototype.getStep = function(value) {\n\n\t\t// Find the proper step for rtl sliders by search in inverse direction.\n\t\t// Fixes issue #262.\n\t\tif (this.direction) {\n\t\t\tvalue = 100 - value;\n\t\t}\n\n\t\tvalue = getStep(this.xPct, this.xSteps, this.snap, value);\n\n\t\tif (this.direction) {\n\t\t\tvalue = 100 - value;\n\t\t}\n\n\t\treturn value;\n\t};\n\n\tSpectrum.prototype.getApplicableStep = function(value) {\n\n\t\t// If the value is 100%, return the negative step twice.\n\t\tvar j = getJ(value, this.xPct),\n\t\t\toffset = value === 100 ? 2 : 1;\n\t\treturn [this.xNumSteps[j - 2], this.xVal[j - offset], this.xNumSteps[j - offset]];\n\t};\n\n\t// Outside testing\n\tSpectrum.prototype.convert = function(value) {\n\t\treturn this.getStep(this.toStepping(value));\n\t};\n\n\t/*\tEvery input option is tested and parsed. This'll prevent\n\t\tendless validation in internal methods. These tests are\n\t\tstructured with an item for every option available. An\n\t\toption can be marked as required by setting the 'r' flag.\n\t\tThe testing function is provided with three arguments:\n\t\t\t- The provided value for the option;\n\t\t\t- A reference to the options object;\n\t\t\t- The name for the option;\n\n\t\tThe testing function returns false when an error is detected,\n\t\tor true when everything is OK. It can also modify the option\n\t\tobject, to make sure all values can be correctly looped elsewhere. */\n\n\tvar defaultFormatter = {\n\t\t'to': function(value) {\n\t\t\treturn value.toFixed(2);\n\t\t},\n\t\t'from': Number\n\t};\n\n\tfunction testStep(parsed, entry) {\n\n\t\tif (!isNumeric(entry)) {\n\t\t\tthrow new Error(\"noUiSlider: 'step' is not numeric.\");\n\t\t}\n\n\t\t// The step option can still be used to set stepping\n\t\t// for linear sliders. Overwritten if set in 'range'.\n\t\tparsed.singleStep = entry;\n\t}\n\n\tfunction testRange(parsed, entry) {\n\n\t\t// Filter incorrect input.\n\t\tif (typeof entry !== 'object' || Array.isArray(entry)) {\n\t\t\tthrow new Error(\"noUiSlider: 'range' is not an object.\");\n\t\t}\n\n\t\t// Catch missing start or end.\n\t\tif (entry.min === undefined || entry.max === undefined) {\n\t\t\tthrow new Error(\"noUiSlider: Missing 'min' or 'max' in 'range'.\");\n\t\t}\n\n\t\tparsed.spectrum = new Spectrum(entry, parsed.snap, parsed.dir, parsed.singleStep);\n\t}\n\n\tfunction testStart(parsed, entry) {\n\n\t\tentry = asArray(entry);\n\n\t\t// Validate input. Values aren't tested, as the public .val method\n\t\t// will always provide a valid location.\n\t\tif (!Array.isArray(entry) || !entry.length || entry.length > 2) {\n\t\t\tthrow new Error(\"noUiSlider: 'start' option is incorrect.\");\n\t\t}\n\n\t\t// Store the number of handles.\n\t\tparsed.handles = entry.length;\n\n\t\t// When the slider is initialized, the .val method will\n\t\t// be called with the start options.\n\t\tparsed.start = entry;\n\t}\n\n\tfunction testSnap(parsed, entry) {\n\n\t\t// Enforce 100% stepping within subranges.\n\t\tparsed.snap = entry;\n\n\t\tif (typeof entry !== 'boolean') {\n\t\t\tthrow new Error(\"noUiSlider: 'snap' option must be a boolean.\");\n\t\t}\n\t}\n\n\tfunction testAnimate(parsed, entry) {\n\n\t\t// Enforce 100% stepping within subranges.\n\t\tparsed.animate = entry;\n\n\t\tif (typeof entry !== 'boolean') {\n\t\t\tthrow new Error(\"noUiSlider: 'animate' option must be a boolean.\");\n\t\t}\n\t}\n\n\tfunction testConnect(parsed, entry) {\n\n\t\tif (entry === 'lower' && parsed.handles === 1) {\n\t\t\tparsed.connect = 1;\n\t\t} else if (entry === 'upper' && parsed.handles === 1) {\n\t\t\tparsed.connect = 2;\n\t\t} else if (entry === true && parsed.handles === 2) {\n\t\t\tparsed.connect = 3;\n\t\t} else if (entry === false) {\n\t\t\tparsed.connect = 0;\n\t\t} else {\n\t\t\tthrow new Error(\"noUiSlider: 'connect' option doesn't match handle count.\");\n\t\t}\n\t}\n\n\tfunction testOrientation(parsed, entry) {\n\n\t\t// Set orientation to an a numerical value for easy\n\t\t// array selection.\n\t\tswitch (entry) {\n\t\t\tcase 'horizontal':\n\t\t\t\tparsed.ort = 0;\n\t\t\t\tbreak;\n\t\t\tcase 'vertical':\n\t\t\t\tparsed.ort = 1;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"noUiSlider: 'orientation' option is invalid.\");\n\t\t}\n\t}\n\n\tfunction testMargin(parsed, entry) {\n\n\t\tif (!isNumeric(entry)) {\n\t\t\tthrow new Error(\"noUiSlider: 'margin' option must be numeric.\");\n\t\t}\n\n\t\tparsed.margin = parsed.spectrum.getMargin(entry);\n\n\t\tif (!parsed.margin) {\n\t\t\tthrow new Error(\"noUiSlider: 'margin' option is only supported on linear sliders.\");\n\t\t}\n\t}\n\n\tfunction testLimit(parsed, entry) {\n\n\t\tif (!isNumeric(entry)) {\n\t\t\tthrow new Error(\"noUiSlider: 'limit' option must be numeric.\");\n\t\t}\n\n\t\tparsed.limit = parsed.spectrum.getMargin(entry);\n\n\t\tif (!parsed.limit) {\n\t\t\tthrow new Error(\"noUiSlider: 'limit' option is only supported on linear sliders.\");\n\t\t}\n\t}\n\n\tfunction testDirection(parsed, entry) {\n\n\t\t// Set direction as a numerical value for easy parsing.\n\t\t// Invert connection for RTL sliders, so that the proper\n\t\t// handles get the connect/background classes.\n\t\tswitch (entry) {\n\t\t\tcase 'ltr':\n\t\t\t\tparsed.dir = 0;\n\t\t\t\tbreak;\n\t\t\tcase 'rtl':\n\t\t\t\tparsed.dir = 1;\n\t\t\t\tparsed.connect = [0, 2, 1, 3][parsed.connect];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"noUiSlider: 'direction' option was not recognized.\");\n\t\t}\n\t}\n\n\tfunction testBehaviour(parsed, entry) {\n\n\t\t// Make sure the input is a string.\n\t\tif (typeof entry !== 'string') {\n\t\t\tthrow new Error(\"noUiSlider: 'behaviour' must be a string containing options.\");\n\t\t}\n\n\t\t// Check if the string contains any keywords.\n\t\t// None are required.\n\t\tvar tap = entry.indexOf('tap') >= 0,\n\t\t\tdrag = entry.indexOf('drag') >= 0,\n\t\t\tfixed = entry.indexOf('fixed') >= 0,\n\t\t\tsnap = entry.indexOf('snap') >= 0;\n\n\t\tparsed.events = {\n\t\t\ttap: tap || snap,\n\t\t\tdrag: drag,\n\t\t\tfixed: fixed,\n\t\t\tsnap: snap\n\t\t};\n\t}\n\n\tfunction testFormat(parsed, entry) {\n\n\t\tparsed.format = entry;\n\n\t\t// Any object with a to and from method is supported.\n\t\tif (typeof entry.to === 'function' && typeof entry.from === 'function') {\n\t\t\treturn true;\n\t\t}\n\n\t\tthrow new Error(\"noUiSlider: 'format' requires 'to' and 'from' methods.\");\n\t}\n\n\t// Test all developer settings and parse to assumption-safe values.\n\tfunction testOptions(options) {\n\n\t\tvar parsed = {\n\t\t\t\tmargin: 0,\n\t\t\t\tlimit: 0,\n\t\t\t\tanimate: true,\n\t\t\t\tformat: defaultFormatter\n\t\t\t},\n\t\t\ttests;\n\n\t\t// Tests are executed in the order they are presented here.\n\t\ttests = {\n\t\t\t'step': {\n\t\t\t\tr: false,\n\t\t\t\tt: testStep\n\t\t\t},\n\t\t\t'start': {\n\t\t\t\tr: true,\n\t\t\t\tt: testStart\n\t\t\t},\n\t\t\t'connect': {\n\t\t\t\tr: true,\n\t\t\t\tt: testConnect\n\t\t\t},\n\t\t\t'direction': {\n\t\t\t\tr: true,\n\t\t\t\tt: testDirection\n\t\t\t},\n\t\t\t'snap': {\n\t\t\t\tr: false,\n\t\t\t\tt: testSnap\n\t\t\t},\n\t\t\t'animate': {\n\t\t\t\tr: false,\n\t\t\t\tt: testAnimate\n\t\t\t},\n\t\t\t'range': {\n\t\t\t\tr: true,\n\t\t\t\tt: testRange\n\t\t\t},\n\t\t\t'orientation': {\n\t\t\t\tr: false,\n\t\t\t\tt: testOrientation\n\t\t\t},\n\t\t\t'margin': {\n\t\t\t\tr: false,\n\t\t\t\tt: testMargin\n\t\t\t},\n\t\t\t'limit': {\n\t\t\t\tr: false,\n\t\t\t\tt: testLimit\n\t\t\t},\n\t\t\t'behaviour': {\n\t\t\t\tr: true,\n\t\t\t\tt: testBehaviour\n\t\t\t},\n\t\t\t'format': {\n\t\t\t\tr: false,\n\t\t\t\tt: testFormat\n\t\t\t}\n\t\t};\n\n\t\tvar defaults = {\n\t\t\t'connect': false,\n\t\t\t'direction': 'ltr',\n\t\t\t'behaviour': 'tap',\n\t\t\t'orientation': 'horizontal'\n\t\t};\n\n\t\t// Set defaults where applicable.\n\t\tObject.keys(defaults).forEach(function(name) {\n\t\t\tif (options[name] === undefined) {\n\t\t\t\toptions[name] = defaults[name];\n\t\t\t}\n\t\t});\n\n\t\t// Run all options through a testing mechanism to ensure correct\n\t\t// input. It should be noted that options might get modified to\n\t\t// be handled properly. E.g. wrapping integers in arrays.\n\t\tObject.keys(tests).forEach(function(name) {\n\n\t\t\tvar test = tests[name];\n\n\t\t\t// If the option isn't set, but it is required, throw an error.\n\t\t\tif (options[name] === undefined) {\n\n\t\t\t\tif (test.r) {\n\t\t\t\t\tthrow new Error(\"noUiSlider: '\" + name + \"' is required.\");\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\ttest.t(parsed, options[name]);\n\t\t});\n\n\t\t// Forward pips options\n\t\tparsed.pips = options.pips;\n\n\t\t// Pre-define the styles.\n\t\tparsed.style = parsed.ort ? 'top' : 'left';\n\n\t\treturn parsed;\n\t}\n\n\n\t// Delimit proposed values for handle positions.\n\tfunction getPositions(a, b, delimit) {\n\n\t\t// Add movement to current position.\n\t\tvar c = a + b[0],\n\t\t\td = a + b[1];\n\n\t\t// Only alter the other position on drag,\n\t\t// not on standard sliding.\n\t\tif (delimit) {\n\t\t\tif (c < 0) {\n\t\t\t\td += Math.abs(c);\n\t\t\t}\n\t\t\tif (d > 100) {\n\t\t\t\tc -= (d - 100);\n\t\t\t}\n\n\t\t\t// Limit values to 0 and 100.\n\t\t\treturn [limit(c), limit(d)];\n\t\t}\n\n\t\treturn [c, d];\n\t}\n\n\t// Provide a clean event with standardized offset values.\n\tfunction fixEvent(e) {\n\n\t\t// Prevent scrolling and panning on touch events, while\n\t\t// attempting to slide. The tap event also depends on this.\n\t\te.preventDefault();\n\n\t\t// Filter the event to register the type, which can be\n\t\t// touch, mouse or pointer. Offset changes need to be\n\t\t// made on an event specific basis.\n\t\tvar touch = e.type.indexOf('touch') === 0,\n\t\t\tmouse = e.type.indexOf('mouse') === 0,\n\t\t\tpointer = e.type.indexOf('pointer') === 0,\n\t\t\tx, y, event = e;\n\n\t\t// IE10 implemented pointer events with a prefix;\n\t\tif (e.type.indexOf('MSPointer') === 0) {\n\t\t\tpointer = true;\n\t\t}\n\n\t\tif (touch) {\n\t\t\t// noUiSlider supports one movement at a time,\n\t\t\t// so we can select the first 'changedTouch'.\n\t\t\tx = e.changedTouches[0].pageX;\n\t\t\ty = e.changedTouches[0].pageY;\n\t\t}\n\n\t\tif (mouse || pointer) {\n\t\t\tx = e.clientX + window.pageXOffset;\n\t\t\ty = e.clientY + window.pageYOffset;\n\t\t}\n\n\t\tevent.points = [x, y];\n\t\tevent.cursor = mouse || pointer; // Fix #435\n\n\t\treturn event;\n\t}\n\n\t// Append a handle to the base.\n\tfunction addHandle(direction, index) {\n\n\t\tvar origin = document.createElement('div'),\n\t\t\thandle = document.createElement('div'),\n\t\t\tadditions = ['-lower', '-upper'];\n\n\t\tif (direction) {\n\t\t\tadditions.reverse();\n\t\t}\n\n\t\taddClass(handle, Classes[3]);\n\t\taddClass(handle, Classes[3] + additions[index]);\n\n\t\taddClass(origin, Classes[2]);\n\t\torigin.appendChild(handle);\n\n\t\treturn origin;\n\t}\n\n\t// Add the proper connection classes.\n\tfunction addConnection(connect, target, handles) {\n\n\t\t// Apply the required connection classes to the elements\n\t\t// that need them. Some classes are made up for several\n\t\t// segments listed in the class list, to allow easy\n\t\t// renaming and provide a minor compression benefit.\n\t\tswitch (connect) {\n\t\t\tcase 1:\n\t\t\t\taddClass(target, Classes[7]);\n\t\t\t\taddClass(handles[0], Classes[6]);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\taddClass(handles[1], Classes[6]);\n\t\t\t\t/* falls through */\n\t\t\tcase 2:\n\t\t\t\taddClass(handles[0], Classes[7]);\n\t\t\t\t/* falls through */\n\t\t\tcase 0:\n\t\t\t\taddClass(target, Classes[6]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Add handles to the slider base.\n\tfunction addHandles(nrHandles, direction, base) {\n\n\t\tvar index, handles = [];\n\n\t\t// Append handles.\n\t\tfor (index = 0; index < nrHandles; index += 1) {\n\n\t\t\t// Keep a list of all added handles.\n\t\t\thandles.push(base.appendChild(addHandle(direction, index)));\n\t\t}\n\n\t\treturn handles;\n\t}\n\n\t// Initialize a single slider.\n\tfunction addSlider(direction, orientation, target) {\n\n\t\t// Apply classes and data to the target.\n\t\taddClass(target, Classes[0]);\n\t\taddClass(target, Classes[8 + direction]);\n\t\taddClass(target, Classes[4 + orientation]);\n\n\t\tvar div = document.createElement('div');\n\t\taddClass(div, Classes[1]);\n\t\ttarget.appendChild(div);\n\t\treturn div;\n\t}\n\n\n\tfunction closure(target, options) {\n\n\t\t// All variables local to 'closure' are prefixed with 'scope_'\n\t\tvar scope_Target = target,\n\t\t\tscope_Locations = [-1, -1],\n\t\t\tscope_Base,\n\t\t\tscope_Handles,\n\t\t\tscope_Spectrum = options.spectrum,\n\t\t\tscope_Values = [],\n\t\t\tscope_Events = {};\n\n\n\t\tfunction getGroup(mode, values, stepped) {\n\n\t\t\t// Use the range.\n\t\t\tif (mode === 'range' || mode === 'steps') {\n\t\t\t\treturn scope_Spectrum.xVal;\n\t\t\t}\n\n\t\t\tif (mode === 'count') {\n\n\t\t\t\t// Divide 0 - 100 in 'count' parts.\n\t\t\t\tvar spread = (100 / (values - 1)),\n\t\t\t\t\tv, i = 0;\n\t\t\t\tvalues = [];\n\n\t\t\t\t// List these parts and have them handled as 'positions'.\n\t\t\t\twhile ((v = i++ * spread) <= 100) {\n\t\t\t\t\tvalues.push(v);\n\t\t\t\t}\n\n\t\t\t\tmode = 'positions';\n\t\t\t}\n\n\t\t\tif (mode === 'positions') {\n\n\t\t\t\t// Map all percentages to on-range values.\n\t\t\t\treturn values.map(function(value) {\n\t\t\t\t\treturn scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (mode === 'values') {\n\n\t\t\t\t// If the value must be stepped, it needs to be converted to a percentage first.\n\t\t\t\tif (stepped) {\n\n\t\t\t\t\treturn values.map(function(value) {\n\n\t\t\t\t\t\t// Convert to percentage, apply step, return to value.\n\t\t\t\t\t\treturn scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, we can simply use the values.\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\n\t\tfunction generateSpread(density, mode, group) {\n\n\t\t\tvar originalSpectrumDirection = scope_Spectrum.direction,\n\t\t\t\tindexes = {},\n\t\t\t\tfirstInRange = scope_Spectrum.xVal[0],\n\t\t\t\tlastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1],\n\t\t\t\tignoreFirst = false,\n\t\t\t\tignoreLast = false,\n\t\t\t\tprevPct = 0;\n\n\t\t\t// This function loops the spectrum in an ltr linear fashion,\n\t\t\t// while the toStepping method is direction aware. Trick it into\n\t\t\t// believing it is ltr.\n\t\t\tscope_Spectrum.direction = 0;\n\n\t\t\t// Create a copy of the group, sort it and filter away all duplicates.\n\t\t\tgroup = unique(group.slice().sort(function(a, b) {\n\t\t\t\treturn a - b;\n\t\t\t}));\n\n\t\t\t// Make sure the range starts with the first element.\n\t\t\tif (group[0] !== firstInRange) {\n\t\t\t\tgroup.unshift(firstInRange);\n\t\t\t\tignoreFirst = true;\n\t\t\t}\n\n\t\t\t// Likewise for the last one.\n\t\t\tif (group[group.length - 1] !== lastInRange) {\n\t\t\t\tgroup.push(lastInRange);\n\t\t\t\tignoreLast = true;\n\t\t\t}\n\n\t\t\tgroup.forEach(function(current, index) {\n\n\t\t\t\t// Get the current step and the lower + upper positions.\n\t\t\t\tvar step, i, q,\n\t\t\t\t\tlow = current,\n\t\t\t\t\thigh = group[index + 1],\n\t\t\t\t\tnewPct, pctDifference, pctPos, type,\n\t\t\t\t\tsteps, realSteps, stepsize;\n\n\t\t\t\t// When using 'steps' mode, use the provided steps.\n\t\t\t\t// Otherwise, we'll step on to the next subrange.\n\t\t\t\tif (mode === 'steps') {\n\t\t\t\t\tstep = scope_Spectrum.xNumSteps[index];\n\t\t\t\t}\n\n\t\t\t\t// Default to a 'full' step.\n\t\t\t\tif (!step) {\n\t\t\t\t\tstep = high - low;\n\t\t\t\t}\n\n\t\t\t\t// Low can be 0, so test for false. If high is undefined,\n\t\t\t\t// we are at the last subrange. Index 0 is already handled.\n\t\t\t\tif (low === false || high === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Find all steps in the subrange.\n\t\t\t\tfor (i = low; i <= high; i += step) {\n\n\t\t\t\t\t// Get the percentage value for the current step,\n\t\t\t\t\t// calculate the size for the subrange.\n\t\t\t\t\tnewPct = scope_Spectrum.toStepping(i);\n\t\t\t\t\tpctDifference = newPct - prevPct;\n\n\t\t\t\t\tsteps = pctDifference / density;\n\t\t\t\t\trealSteps = Math.round(steps);\n\n\t\t\t\t\t// This ratio represents the ammount of percentage-space a point indicates.\n\t\t\t\t\t// For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-devided.\n\t\t\t\t\t// Round the percentage offset to an even number, then divide by two\n\t\t\t\t\t// to spread the offset on both sides of the range.\n\t\t\t\t\tstepsize = pctDifference / realSteps;\n\n\t\t\t\t\t// Divide all points evenly, adding the correct number to this subrange.\n\t\t\t\t\t// Run up to <= so that 100% gets a point, event if ignoreLast is set.\n\t\t\t\t\tfor (q = 1; q <= realSteps; q += 1) {\n\n\t\t\t\t\t\t// The ratio between the rounded value and the actual size might be ~1% off.\n\t\t\t\t\t\t// Correct the percentage offset by the number of points\n\t\t\t\t\t\t// per subrange. density = 1 will result in 100 points on the\n\t\t\t\t\t\t// full range, 2 for 50, 4 for 25, etc.\n\t\t\t\t\t\tpctPos = prevPct + (q * stepsize);\n\t\t\t\t\t\tindexes[pctPos.toFixed(5)] = ['x', 0];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Determine the point type.\n\t\t\t\t\ttype = (group.indexOf(i) > -1) ? 1 : (mode === 'steps' ? 2 : 0);\n\n\t\t\t\t\t// Enforce the 'ignoreFirst' option by overwriting the type for 0.\n\t\t\t\t\tif (!index && ignoreFirst) {\n\t\t\t\t\t\ttype = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(i === high && ignoreLast)) {\n\t\t\t\t\t\t// Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value.\n\t\t\t\t\t\tindexes[newPct.toFixed(5)] = [i, type];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update the percentage count.\n\t\t\t\t\tprevPct = newPct;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Reset the spectrum.\n\t\t\tscope_Spectrum.direction = originalSpectrumDirection;\n\n\t\t\treturn indexes;\n\t\t}\n\n\t\tfunction addMarking(spread, filterFunc, formatter) {\n\n\t\t\tvar style = ['horizontal', 'vertical'][options.ort],\n\t\t\t\telement = document.createElement('div');\n\n\t\t\taddClass(element, 'noUi-pips');\n\t\t\taddClass(element, 'noUi-pips-' + style);\n\n\t\t\tfunction getSize(type) {\n\t\t\t\treturn ['-normal', '-large', '-sub'][type];\n\t\t\t}\n\n\t\t\tfunction getTags(offset, source, values) {\n\t\t\t\treturn 'class=\"' + source + ' ' +\n\t\t\t\t\tsource + '-' + style + ' ' +\n\t\t\t\t\tsource + getSize(values[1]) +\n\t\t\t\t\t'\" style=\"' + options.style + ': ' + offset + '%\"';\n\t\t\t}\n\n\t\t\tfunction addSpread(offset, values) {\n\n\t\t\t\tif (scope_Spectrum.direction) {\n\t\t\t\t\toffset = 100 - offset;\n\t\t\t\t}\n\n\t\t\t\t// Apply the filter function, if it is set.\n\t\t\t\tvalues[1] = (values[1] && filterFunc) ? filterFunc(values[0], values[1]) : values[1];\n\n\t\t\t\t// Add a marker for every point\n\t\t\t\telement.innerHTML += '<div ' + getTags(offset, 'noUi-marker', values) + '></div>';\n\n\t\t\t\t// Values are only appended for points marked '1' or '2'.\n\t\t\t\tif (values[1]) {\n\t\t\t\t\telement.innerHTML += '<div ' + getTags(offset, 'noUi-value', values) + '>' + formatter.to(values[0]) + '</div>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Append all points.\n\t\t\tObject.keys(spread).forEach(function(a) {\n\t\t\t\taddSpread(a, spread[a]);\n\t\t\t});\n\n\t\t\treturn element;\n\t\t}\n\n\t\tfunction pips(grid) {\n\n\t\t\tvar mode = grid.mode,\n\t\t\t\tdensity = grid.density || 1,\n\t\t\t\tfilter = grid.filter || false,\n\t\t\t\tvalues = grid.values || false,\n\t\t\t\tstepped = grid.stepped || false,\n\t\t\t\tgroup = getGroup(mode, values, stepped),\n\t\t\t\tspread = generateSpread(density, mode, group),\n\t\t\t\tformat = grid.format || {\n\t\t\t\t\tto: Math.round\n\t\t\t\t};\n\n\t\t\treturn scope_Target.appendChild(addMarking(\n\t\t\t\tspread,\n\t\t\t\tfilter,\n\t\t\t\tformat\n\t\t\t));\n\t\t}\n\n\n\t\t// Shorthand for base dimensions.\n\t\tfunction baseSize() {\n\t\t\treturn scope_Base['offset' + ['Width', 'Height'][options.ort]];\n\t\t}\n\n\t\t// External event handling\n\t\tfunction fireEvent(event, handleNumber) {\n\n\t\t\tif (handleNumber !== undefined) {\n\t\t\t\thandleNumber = Math.abs(handleNumber - options.dir);\n\t\t\t}\n\n\t\t\tObject.keys(scope_Events).forEach(function(targetEvent) {\n\n\t\t\t\tvar eventType = targetEvent.split('.')[0];\n\n\t\t\t\tif (event === eventType) {\n\t\t\t\t\tscope_Events[targetEvent].forEach(function(callback) {\n\t\t\t\t\t\t// .reverse is in place\n\t\t\t\t\t\t// Return values as array, so arg_1[arg_2] is always valid.\n\t\t\t\t\t\tcallback(asArray(valueGet()), handleNumber, inSliderOrder(Array.prototype.slice.call(scope_Values)));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Returns the input array, respecting the slider direction configuration.\n\t\tfunction inSliderOrder(values) {\n\n\t\t\t// If only one handle is used, return a single value.\n\t\t\tif (values.length === 1) {\n\t\t\t\treturn values[0];\n\t\t\t}\n\n\t\t\tif (options.dir) {\n\t\t\t\treturn values.reverse();\n\t\t\t}\n\n\t\t\treturn values;\n\t\t}\n\n\n\t\t// Handler for attaching events trough a proxy.\n\t\tfunction attach(events, element, callback, data) {\n\n\t\t\t// This function can be used to 'filter' events to the slider.\n\t\t\t// element is a node, not a nodeList\n\n\t\t\tvar method = function(e) {\n\n\t\t\t\t\tif (scope_Target.hasAttribute('disabled')) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Stop if an active 'tap' transition is taking place.\n\t\t\t\t\tif (hasClass(scope_Target, Classes[14])) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\te = fixEvent(e);\n\n\t\t\t\t\t// Ignore right or middle clicks on start #454\n\t\t\t\t\tif (events === actions.start && e.buttons !== undefined && e.buttons > 1) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\te.calcPoint = e.points[options.ort];\n\n\t\t\t\t\t// Call the event handler with the event [ and additional data ].\n\t\t\t\t\tcallback(e, data);\n\n\t\t\t\t},\n\t\t\t\tmethods = [];\n\n\t\t\t// Bind a closure on the target for every event type.\n\t\t\tevents.split(' ').forEach(function(eventName) {\n\t\t\t\telement.addEventListener(eventName, method, false);\n\t\t\t\tmethods.push([eventName, method]);\n\t\t\t});\n\n\t\t\treturn methods;\n\t\t}\n\n\t\t// Handle movement on document for handle and range drag.\n\t\tfunction move(event, data) {\n\n\t\t\tvar handles = data.handles || scope_Handles,\n\t\t\t\tpositions, state = false,\n\t\t\t\tproposal = ((event.calcPoint - data.start) * 100) / baseSize(),\n\t\t\t\thandleNumber = handles[0] === scope_Handles[0] ? 0 : 1,\n\t\t\t\ti;\n\n\t\t\t// Calculate relative positions for the handles.\n\t\t\tpositions = getPositions(proposal, data.positions, handles.length > 1);\n\n\t\t\tstate = setHandle(handles[0], positions[handleNumber], handles.length === 1);\n\n\t\t\tif (handles.length > 1) {\n\n\t\t\t\tstate = setHandle(handles[1], positions[handleNumber ? 0 : 1], false) || state;\n\n\t\t\t\tif (state) {\n\t\t\t\t\t// fire for both handles\n\t\t\t\t\tfor (i = 0; i < data.handles.length; i++) {\n\t\t\t\t\t\tfireEvent('slide', i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (state) {\n\t\t\t\t// Fire for a single handle\n\t\t\t\tfireEvent('slide', handleNumber);\n\t\t\t}\n\t\t}\n\n\t\t// Unbind move events on document, call callbacks.\n\t\tfunction end(event, data) {\n\n\t\t\t// The handle is no longer active, so remove the class.\n\t\t\tvar active = scope_Base.getElementsByClassName(Classes[15]),\n\t\t\t\thandleNumber = data.handles[0] === scope_Handles[0] ? 0 : 1;\n\n\t\t\tif (active.length) {\n\t\t\t\tremoveClass(active[0], Classes[15]);\n\t\t\t}\n\n\t\t\t// Remove cursor styles and text-selection events bound to the body.\n\t\t\tif (event.cursor) {\n\t\t\t\tdocument.body.style.cursor = '';\n\t\t\t\tdocument.body.removeEventListener('selectstart', document.body.noUiListener);\n\t\t\t}\n\n\t\t\tvar d = document.documentElement;\n\n\t\t\t// Unbind the move and end events, which are added on 'start'.\n\t\t\td.noUiListeners.forEach(function(c) {\n\t\t\t\td.removeEventListener(c[0], c[1]);\n\t\t\t});\n\n\t\t\t// Remove dragging class.\n\t\t\tremoveClass(scope_Target, Classes[12]);\n\n\t\t\t// Fire the change and set events.\n\t\t\tfireEvent('set', handleNumber);\n\t\t\tfireEvent('change', handleNumber);\n\t\t}\n\n\t\t// Bind move events on document.\n\t\tfunction start(event, data) {\n\n\t\t\tvar d = document.documentElement;\n\n\t\t\t// Mark the handle as 'active' so it can be styled.\n\t\t\tif (data.handles.length === 1) {\n\t\t\t\taddClass(data.handles[0].children[0], Classes[15]);\n\n\t\t\t\t// Support 'disabled' handles\n\t\t\t\tif (data.handles[0].hasAttribute('disabled')) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// A drag should never propagate up to the 'tap' event.\n\t\t\tevent.stopPropagation();\n\n\t\t\t// Attach the move and end events.\n\t\t\tvar moveEvent = attach(actions.move, d, move, {\n\t\t\t\t\tstart: event.calcPoint,\n\t\t\t\t\thandles: data.handles,\n\t\t\t\t\tpositions: [\n\t\t\t\t\t\tscope_Locations[0],\n\t\t\t\t\t\tscope_Locations[scope_Handles.length - 1]\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tendEvent = attach(actions.end, d, end, {\n\t\t\t\t\thandles: data.handles\n\t\t\t\t});\n\n\t\t\td.noUiListeners = moveEvent.concat(endEvent);\n\n\t\t\t// Text selection isn't an issue on touch devices,\n\t\t\t// so adding cursor styles can be skipped.\n\t\t\tif (event.cursor) {\n\n\t\t\t\t// Prevent the 'I' cursor and extend the range-drag cursor.\n\t\t\t\tdocument.body.style.cursor = getComputedStyle(event.target).cursor;\n\n\t\t\t\t// Mark the target with a dragging state.\n\t\t\t\tif (scope_Handles.length > 1) {\n\t\t\t\t\taddClass(scope_Target, Classes[12]);\n\t\t\t\t}\n\n\t\t\t\tvar f = function() {\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\n\t\t\t\tdocument.body.noUiListener = f;\n\n\t\t\t\t// Prevent text selection when dragging the handles.\n\t\t\t\tdocument.body.addEventListener('selectstart', f, false);\n\t\t\t}\n\t\t}\n\n\t\t// Move closest handle to tapped location.\n\t\tfunction tap(event) {\n\n\t\t\tvar location = event.calcPoint,\n\t\t\t\ttotal = 0,\n\t\t\t\thandleNumber, to;\n\n\t\t\t// The tap event shouldn't propagate up and cause 'edge' to run.\n\t\t\tevent.stopPropagation();\n\n\t\t\t// Add up the handle offsets.\n\t\t\tscope_Handles.forEach(function(a) {\n\t\t\t\ttotal += offset(a)[options.style];\n\t\t\t});\n\n\t\t\t// Find the handle closest to the tapped position.\n\t\t\thandleNumber = (location < total / 2 || scope_Handles.length === 1) ? 0 : 1;\n\n\t\t\tlocation -= offset(scope_Base)[options.style];\n\n\t\t\t// Calculate the new position.\n\t\t\tto = (location * 100) / baseSize();\n\n\t\t\tif (!options.events.snap) {\n\t\t\t\t// Flag the slider as it is now in a transitional state.\n\t\t\t\t// Transition takes 300 ms, so re-enable the slider afterwards.\n\t\t\t\taddClassFor(scope_Target, Classes[14], 300);\n\t\t\t}\n\n\t\t\t// Support 'disabled' handles\n\t\t\tif (scope_Handles[handleNumber].hasAttribute('disabled')) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Find the closest handle and calculate the tapped point.\n\t\t\t// The set handle to the new position.\n\t\t\tsetHandle(scope_Handles[handleNumber], to);\n\n\t\t\tfireEvent('slide', handleNumber);\n\t\t\tfireEvent('set', handleNumber);\n\t\t\tfireEvent('change', handleNumber);\n\n\t\t\tif (options.events.snap) {\n\t\t\t\tstart(event, {\n\t\t\t\t\thandles: [scope_Handles[total]]\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Attach events to several slider parts.\n\t\tfunction events(behaviour) {\n\n\t\t\tvar i, drag;\n\n\t\t\t// Attach the standard drag event to the handles.\n\t\t\tif (!behaviour.fixed) {\n\n\t\t\t\tfor (i = 0; i < scope_Handles.length; i += 1) {\n\n\t\t\t\t\t// These events are only bound to the visual handle\n\t\t\t\t\t// element, not the 'real' origin element.\n\t\t\t\t\tattach(actions.start, scope_Handles[i].children[0], start, {\n\t\t\t\t\t\thandles: [scope_Handles[i]]\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Attach the tap event to the slider base.\n\t\t\tif (behaviour.tap) {\n\n\t\t\t\tattach(actions.start, scope_Base, tap, {\n\t\t\t\t\thandles: scope_Handles\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Make the range dragable.\n\t\t\tif (behaviour.drag) {\n\n\t\t\t\tdrag = [scope_Base.getElementsByClassName(Classes[7])[0]];\n\t\t\t\taddClass(drag[0], Classes[10]);\n\n\t\t\t\t// When the range is fixed, the entire range can\n\t\t\t\t// be dragged by the handles. The handle in the first\n\t\t\t\t// origin will propagate the start event upward,\n\t\t\t\t// but it needs to be bound manually on the other.\n\t\t\t\tif (behaviour.fixed) {\n\t\t\t\t\tdrag.push(scope_Handles[(drag[0] === scope_Handles[0] ? 1 : 0)].children[0]);\n\t\t\t\t}\n\n\t\t\t\tdrag.forEach(function(element) {\n\t\t\t\t\tattach(actions.start, element, start, {\n\t\t\t\t\t\thandles: scope_Handles\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\n\t\t// Test suggested values and apply margin, step.\n\t\tfunction setHandle(handle, to, noLimitOption) {\n\n\t\t\tvar trigger = handle !== scope_Handles[0] ? 1 : 0,\n\t\t\t\tlowerMargin = scope_Locations[0] + options.margin,\n\t\t\t\tupperMargin = scope_Locations[1] - options.margin,\n\t\t\t\tlowerLimit = scope_Locations[0] + options.limit,\n\t\t\t\tupperLimit = scope_Locations[1] - options.limit;\n\n\t\t\t// For sliders with multiple handles,\n\t\t\t// limit movement to the other handle.\n\t\t\t// Apply the margin option by adding it to the handle positions.\n\t\t\tif (scope_Handles.length > 1) {\n\t\t\t\tto = trigger ? Math.max(to, lowerMargin) : Math.min(to, upperMargin);\n\t\t\t}\n\n\t\t\t// The limit option has the opposite effect, limiting handles to a\n\t\t\t// maximum distance from another. Limit must be > 0, as otherwise\n\t\t\t// handles would be unmoveable. 'noLimitOption' is set to 'false'\n\t\t\t// for the .val() method, except for pass 4/4.\n\t\t\tif (noLimitOption !== false && options.limit && scope_Handles.length > 1) {\n\t\t\t\tto = trigger ? Math.min(to, lowerLimit) : Math.max(to, upperLimit);\n\t\t\t}\n\n\t\t\t// Handle the step option.\n\t\t\tto = scope_Spectrum.getStep(to);\n\n\t\t\t// Limit to 0/100 for .val input, trim anything beyond 7 digits, as\n\t\t\t// JavaScript has some issues in its floating point implementation.\n\t\t\tto = limit(parseFloat(to.toFixed(7)));\n\n\t\t\t// Return false if handle can't move.\n\t\t\tif (to === scope_Locations[trigger]) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Set the handle to the new position.\n\t\t\thandle.style[options.style] = to + '%';\n\n\t\t\t// Force proper handle stacking\n\t\t\tif (!handle.previousSibling) {\n\t\t\t\tremoveClass(handle, Classes[17]);\n\t\t\t\tif (to > 50) {\n\t\t\t\t\taddClass(handle, Classes[17]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update locations.\n\t\t\tscope_Locations[trigger] = to;\n\n\t\t\t// Convert the value to the slider stepping/range.\n\t\t\tscope_Values[trigger] = scope_Spectrum.fromStepping(to);\n\n\t\t\tfireEvent('update', trigger);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Loop values from value method and apply them.\n\t\tfunction setValues(count, values) {\n\n\t\t\tvar i, trigger, to;\n\n\t\t\t// With the limit option, we'll need another limiting pass.\n\t\t\tif (options.limit) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\n\t\t\t// If there are multiple handles to be set run the setting\n\t\t\t// mechanism twice for the first handle, to make sure it\n\t\t\t// can be bounced of the second one properly.\n\t\t\tfor (i = 0; i < count; i += 1) {\n\n\t\t\t\ttrigger = i % 2;\n\n\t\t\t\t// Get the current argument from the array.\n\t\t\t\tto = values[trigger];\n\n\t\t\t\t// Setting with null indicates an 'ignore'.\n\t\t\t\t// Inputting 'false' is invalid.\n\t\t\t\tif (to !== null && to !== false) {\n\n\t\t\t\t\t// If a formatted number was passed, attemt to decode it.\n\t\t\t\t\tif (typeof to === 'number') {\n\t\t\t\t\t\tto = String(to);\n\t\t\t\t\t}\n\n\t\t\t\t\tto = options.format.from(to);\n\n\t\t\t\t\t// Request an update for all links if the value was invalid.\n\t\t\t\t\t// Do so too if setting the handle fails.\n\t\t\t\t\tif (to === false || isNaN(to) || setHandle(scope_Handles[trigger], scope_Spectrum.toStepping(to), i === (3 - options.dir)) === false) {\n\t\t\t\t\t\tfireEvent('update', trigger);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set the slider value.\n\t\tfunction valueSet(input) {\n\n\t\t\tvar count, values = asArray(input),\n\t\t\t\ti;\n\n\t\t\t// The RTL settings is implemented by reversing the front-end,\n\t\t\t// internal mechanisms are the same.\n\t\t\tif (options.dir && options.handles > 1) {\n\t\t\t\tvalues.reverse();\n\t\t\t}\n\n\t\t\t// Animation is optional.\n\t\t\t// Make sure the initial values where set before using animated placement.\n\t\t\tif (options.animate && scope_Locations[0] !== -1) {\n\t\t\t\taddClassFor(scope_Target, Classes[14], 300);\n\t\t\t}\n\n\t\t\t// Determine how often to set the handles.\n\t\t\tcount = scope_Handles.length > 1 ? 3 : 1;\n\n\t\t\tif (values.length === 1) {\n\t\t\t\tcount = 1;\n\t\t\t}\n\n\t\t\tsetValues(count, values);\n\n\t\t\t// Fire the 'set' event for both handles.\n\t\t\tfor (i = 0; i < scope_Handles.length; i++) {\n\t\t\t\tfireEvent('set', i);\n\t\t\t}\n\t\t}\n\n\t\t// Get the slider value.\n\t\tfunction valueGet() {\n\n\t\t\tvar i, retour = [];\n\n\t\t\t// Get the value from all handles.\n\t\t\tfor (i = 0; i < options.handles; i += 1) {\n\t\t\t\tretour[i] = options.format.to(scope_Values[i]);\n\t\t\t}\n\n\t\t\treturn inSliderOrder(retour);\n\t\t}\n\n\t\t// Removes classes from the root and empties it.\n\t\tfunction destroy() {\n\t\t\tClasses.forEach(function(cls) {\n\t\t\t\tif (!cls) {\n\t\t\t\t\treturn;\n\t\t\t\t} // Ignore empty classes\n\t\t\t\tremoveClass(scope_Target, cls);\n\t\t\t});\n\t\t\tscope_Target.innerHTML = '';\n\t\t\tdelete scope_Target.noUiSlider;\n\t\t}\n\n\t\t// Get the current step size for the slider.\n\t\tfunction getCurrentStep() {\n\n\t\t\t// Check all locations, map them to their stepping point.\n\t\t\t// Get the step point, then find it in the input list.\n\t\t\tvar retour = scope_Locations.map(function(location, index) {\n\n\t\t\t\tvar step = scope_Spectrum.getApplicableStep(location),\n\n\t\t\t\t\t// As per #391, the comparison for the decrement step can have some rounding issues.\n\t\t\t\t\t// Round the value to the precision used in the step.\n\t\t\t\t\tstepDecimals = countDecimals(String(step[2])),\n\n\t\t\t\t\t// Get the current numeric value\n\t\t\t\t\tvalue = scope_Values[index],\n\n\t\t\t\t\t// To move the slider 'one step up', the current step value needs to be added.\n\t\t\t\t\t// Use null if we are at the maximum slider value.\n\t\t\t\t\tincrement = location === 100 ? null : step[2],\n\n\t\t\t\t\t// Going 'one step down' might put the slider in a different sub-range, so we\n\t\t\t\t\t// need to switch between the current or the previous step.\n\t\t\t\t\tprev = Number((value - step[2]).toFixed(stepDecimals)),\n\n\t\t\t\t\t// If the value fits the step, return the current step value. Otherwise, use the\n\t\t\t\t\t// previous step. Return null if the slider is at its minimum value.\n\t\t\t\t\tdecrement = location === 0 ? null : (prev >= step[1]) ? step[2] : (step[0] || false);\n\n\t\t\t\treturn [decrement, increment];\n\t\t\t});\n\n\t\t\t// Return values in the proper order.\n\t\t\treturn inSliderOrder(retour);\n\t\t}\n\n\t\t// Attach an event to this slider, possibly including a namespace\n\t\tfunction bindEvent(namespacedEvent, callback) {\n\t\t\tscope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];\n\t\t\tscope_Events[namespacedEvent].push(callback);\n\n\t\t\t// If the event bound is 'update,' fire it immediately for all handles.\n\t\t\tif (namespacedEvent.split('.')[0] === 'update') {\n\t\t\t\tscope_Handles.forEach(function(a, index) {\n\t\t\t\t\tfireEvent('update', index);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Undo attachment of event\n\t\tfunction removeEvent(namespacedEvent) {\n\n\t\t\tvar event = namespacedEvent.split('.')[0],\n\t\t\t\tnamespace = namespacedEvent.substring(event.length);\n\n\t\t\tObject.keys(scope_Events).forEach(function(bind) {\n\n\t\t\t\tvar tEvent = bind.split('.')[0],\n\t\t\t\t\ttNamespace = bind.substring(tEvent.length);\n\n\t\t\t\tif ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {\n\t\t\t\t\tdelete scope_Events[bind];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\n\t\t// Throw an error if the slider was already initialized.\n\t\tif (scope_Target.noUiSlider) {\n\t\t\tthrow new Error('Slider was already initialized.');\n\t\t}\n\n\n\t\t// Create the base element, initialise HTML and set classes.\n\t\t// Add handles and links.\n\t\tscope_Base = addSlider(options.dir, options.ort, scope_Target);\n\t\tscope_Handles = addHandles(options.handles, options.dir, scope_Base);\n\n\t\t// Set the connect classes.\n\t\taddConnection(options.connect, scope_Target, scope_Handles);\n\n\t\t// Attach user events.\n\t\tevents(options.events);\n\n\t\tif (options.pips) {\n\t\t\tpips(options.pips);\n\t\t}\n\n\t\treturn {\n\t\t\tdestroy: destroy,\n\t\t\tsteps: getCurrentStep,\n\t\t\ton: bindEvent,\n\t\t\toff: removeEvent,\n\t\t\tget: valueGet,\n\t\t\tset: valueSet\n\t\t};\n\n\t}\n\n\n\t// Run the standard initializer\n\tfunction initialize(target, originalOptions) {\n\n\t\tif (!target.nodeName) {\n\t\t\tthrow new Error('noUiSlider.create requires a single element.');\n\t\t}\n\n\t\t// Test the options and create the slider environment;\n\t\tvar options = testOptions(originalOptions, target),\n\t\t\tslider = closure(target, options);\n\n\t\t// Use the public value method to set the start values.\n\t\tslider.set(options.start);\n\n\t\ttarget.noUiSlider = slider;\n\n\t\tif (originalOptions.tooltips === true || originalOptions.tooltips === undefined) {\n\t\t\t// Tooltips\n\t\t\tvar tipHandles = target.getElementsByClassName('noUi-handle'),\n\t\t\t\ttooltips = [];\n\n\t\t\t// Add divs to the slider handles.\n\t\t\tfor (var i = 0; i < tipHandles.length; i++) {\n\t\t\t\ttooltips[i] = document.createElement('div');\n\t\t\t\ttipHandles[i].appendChild(tooltips[i]);\n\t\t\t\t// Add a class for styling\n\t\t\t\ttooltips[i].className += 'range-label';\n\t\t\t\t// Add additional markup\n\t\t\t\ttooltips[i].innerHTML = '<span></span>';\n\t\t\t\t// Replace the tooltip reference with the span we just added\n\t\t\t\ttooltips[i] = tooltips[i].getElementsByTagName('span')[0];\n\t\t\t}\n\n\n\t\t\t// When the slider changes, write the value to the tooltips.\n\t\t\ttarget.noUiSlider.on('update', function(values, handle) {\n\n\t\t\t\ttooltips[handle].innerHTML = values[handle];\n\t\t\t});\n\t\t}\n\t}\n\n\t// Use an object instead of a function for future expansibility;\n\treturn {\n\t\tcreate: initialize\n\t};\n\n}));"],"sourceRoot":"/source/"}